{
  "name": "netbeast",
  "version": "1.0.5",
  "description": "Resources for node.js wrapper",
  "main": "index.js",
  "scripts": {
    "test": "npm test",
    "app": "node index.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/netbeast/api.git"
  },
  "keywords": [
    "netbeast",
    "resources",
    "iot",
    "home",
    "automation"
  ],
  "author": {
    "name": "staff@netbeast.co"
  },
  "license": "GPL3",
  "bugs": {
    "url": "https://github.com/netbeast/api/issues"
  },
  "homepage": "https://github.com/netbeast/api",
  "dependencies": {
    "bluebird": "^3.1.4",
    "chalk": "^1.1.1",
    "cli-spinner": "^0.2.2",
    "freeport": "^1.0.5",
    "mqtt": "^1.7.0",
    "superagent-bluebird-promise": "^3.0.0"
  },
  "readme": "# API Reference\n\nWelcome to the Netbeast API Documentation!\n\nThe main goal of this documentation is to explain how the Netbeast API works. All the information that you need to start building your Apps has been gathered here.\n\n## How to use it?\n\nFirst of all, you need to install the npm package in your netbeast app\n````\nnpm install netbeast --save\n````\n Once the package is in the node_modules folder, you can require it from the code.\n\n```javascript\nvar beast = require('netbeast')\n\nbeast('lights').get()\n\nbeast('music').at('living-room').set({status: 'play', volume: 100})\n\nbeast('video').get('status')\n```\n\nControl your smart devices with Netbeast is as simple as that. Lets go deeper! :rocket:\n\n###Arguments\n\nEach device support specific parameters.\nIf you try to set an unsupported parameter to a switch (for example the brightness, `beast('switch').set({brightness: 80})`) you will return a soft error. The process keep working but send you a warning.\n\nHere is a list of supported arguments for each device.\n* switch & bridge\n    * power:  `true || false`\n* lights\n    * power:    `true || false`\n    * hue:           `0..360`\n    * saturation:    `0..100`\n    * brightness:    `0..100`\n    * color: `{r: 0, g: 0, b: 0} || #FF13AA`\n* music & video\n    * volume:       `0..100`\n    * status:       `play || pause || stop || mute || unmute || info`\n    * track:        `must be the url of the song/video`\n* temperature       `ºC`\n* humidity          `0..100`\n* luminosity        `photons per square meter`\n* battery           `0..100`\n\nA example of use:\n````javascript\nvar beast = require('netbeast')\nbeast('lights').set({power: true, brightness: 100, hue: 0, saturation: 100})\n````\n If you have white and color bulbs, the first ones are going to switch on and change the brightness. The color bulbs will also change their color to red and the execution continues without problems.\n\n###Output\n\nAll the methods acts as a promise and they always return a Javascript object if successful or an error object else.\n````javascript\nvar beast = require('netbeast')\n\nbeast('temperature').at('kitchen').get()\n.then(function (data) {\n  console.log('The temperature in the kitchen is ' + data + 'ºC')\n}).catch(function (err) {\n  console.log('Error: ' + err)\n})\n````\nYou will find all the documentation and how to use the different methods [here](http://docs.netbeast.co/chapters/api_reference/index.html)!\n",
  "readmeFilename": "README.md",
  "gitHead": "17c440b6005930e1cfb9ef673be39b4a49a84245",
  "_id": "netbeast@1.0.5",
  "_shasum": "797e7434d74ffb7467ecde97f59dc0ee912e5b64",
  "_from": "netbeast@>=1.0.1 <2.0.0"
}
